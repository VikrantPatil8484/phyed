import React from "react";
import CodeHighlighter from "../../components/CodeHighlighter";

const IoTDMRealTime = () => {
  const codeString = `import time

  def monitor_temperature():
      while True:
          temperature = get_temperature()  # Assume get_temperature() is a function to retrieve the current temperature
          if temperature > 25:
              send_alert("Temperature is too high!")
          time.sleep(1)  # Wait for 1 second before checking again
  
  def send_alert(message):
      print("ALERT:", message)
  
  monitor_temperature()`;
  const codeString1 = `
  def process_temperature_stream():
      total = 0
      count = 0
  
      while True:
          temperature = get_temperature()
          total += temperature
          count += 1
          average = total / count
          print("Average Temperature:", average)
          time.sleep(1)
  
  process_temperature_stream()
  
  `;
  return (
    <div>
      <section className="p-4 md:text-base text-justify text-sm">
        <article className="mt-6">
          <h4 className="p-2 text-lg font-bold rounded-md card-bg w-full">
            Real-time processing and stream analytics for IoT applications
          </h4>
          <p className="text-justify p-2 pt-4">
            <span className="font-semibold">1. Real-Time Processing:</span>
            Real-time processing refers to the ability to process data as soon
            as it arrives, without any significant delay. In the context of IoT,
            this means analyzing and acting upon the data collected from IoT
            devices in real-time. Real-time processing is crucial for
            applications that require immediate action or quick decision-making.
          </p>
          <h3 className="p-2 text-lg font-bold">
            Let's consider an example where we want to monitor the temperature
            in a room and receive an alert if it exceeds a certain threshold:
          </h3>
          <CodeHighlighter>{codeString}</CodeHighlighter>
          <p className="text-justify p-2 pt-4">
            In this code, we have a function called monitor_temperature that
            continuously checks the current temperature using a function
            get_temperature(). If the temperature exceeds a threshold (in this
            case, 25 degrees), it calls the send_alert function to print an
            alert message. The program then waits for 1 second using
            time.sleep(1) before checking the temperature again. This creates a
            continuous loop for real-time monitoring of the temperature.
          </p>
          <p className="text-justify p-2 pt-4">
            <span className="font-semibold">2. Stream Analytics:</span>
            Stream analytics involves processing and analyzing data streams in
            real-time. A data stream is a continuous flow of data, often
            generated by IoT devices. Stream analytics allows us to extract
            meaningful insights, detect patterns, and make decisions based on
            the data as it arrives.
          </p>
          <h3 className="p-2 text-lg font-bold">
            Let's modify our previous example to calculate the average
            temperature of a data stream:
          </h3>
          <CodeHighlighter>{codeString1}</CodeHighlighter>
          <p className="text-justify p-2 pt-4">
            In this code, we have a function called process_temperature_stream
            that continuously receives temperature readings from
            get_temperature() and maintains a running total and count of the
            temperatures. It calculates the average temperature by dividing the
            total by the count and prints it. The program then waits for 1
            second before processing the next temperature reading.
          </p>
          <p className="text-justify p-2 pt-4">
            These examples illustrate how real-time processing and stream
            analytics can be used in IoT applications. In real-world scenarios,
            more advanced techniques and tools, such as stream processing
            frameworks or complex algorithms, can be used to handle large-scale
            data streams.
          </p>
        </article>
      </section>
    </div>
  );
};

export default IoTDMRealTime;
